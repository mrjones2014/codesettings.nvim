*codesettings.nvim.txt*    For Neovim >= 0.11.0   Last change: 2025 October 12

==============================================================================
Table of Contents                        *codesettings.nvim-table-of-contents*

1. Requirements                               |codesettings.nvim-requirements|
2. Installation                               |codesettings.nvim-installation|
3. Quick start                                 |codesettings.nvim-quick-start|
  - Rustaceanvim                  |codesettings.nvim-quick-start-rustaceanvim|
4. Features                                       |codesettings.nvim-features|
5. Commands                                       |codesettings.nvim-commands|
6. API                                                 |codesettings.nvim-api|
7. How it finds your settings   |codesettings.nvim-how-it-finds-your-settings|
8. How merging works                     |codesettings.nvim-how-merging-works|
9. Comparison with neoconf.nvim|codesettings.nvim-comparison-with-neoconf.nvim|
10. Acknowledgements                      |codesettings.nvim-acknowledgements|
11. Supported LSP Servers            |codesettings.nvim-supported-lsp-servers|
12. Links                                            |codesettings.nvim-links|
Easily read your project’s local settings files and merge them into your
Neovim 0.11+ native LSP configuration.

This plugin makes it easy to reuse settings your team already committed to
version control for VS Code by providing an API to merge the relevant settings
from VS Code’s settings schema into the LSP `settings` table you pass to
`vim.lsp.config()` (or any way you configure LSP).


==============================================================================
1. Requirements                               *codesettings.nvim-requirements*

- Neovim 0.11+ (uses the new `vim.lsp.config()` API)
- A JSON(C) file in your project root with LSP settings (optional; if missing, your config is returned unchanged).
    Paths are configurable, but by default, the plugin looks for any of:
    - `.vscode/settings.json`
    - `codesettings.json`
    - `lspsettings.json`


==============================================================================
2. Installation                               *codesettings.nvim-installation*

For some features (namely, `jsonls` integration and `jsonc` filetype handling),
you must call `setup()`.

- lazy.nvim (recommended)

>lua
    return {
      'mrjones2014/codesettings.nvim',
      -- these are the default settings just set `opts = {}` to use defaults
      opts = {
        ---Look for these config files
        config_file_paths = { '.vscode/settings.json', 'codesettings.json', 'lspsettings.json' },
        ---Integrate with jsonls to provide LSP completion for LSP settings based on schemas
        jsonls_integration = true,
        ---Set filetype to jsonc when opening a file specified by `config_file_paths`,
        ---make sure you have the jsonc tree-sitter parser installed for highlighting
        jsonc_filetype = true,
        ---Choose the default merge behavior
        default_merge_opts = {
          --- How to merge lists; 'replace' (default), 'append', or 'prepend'
          list_behavior = 'append',
        },
      },
      -- I recommend loading on these filetype so that the
      -- jsonls integration and jsonc filetype setup works
      ft = { 'json', 'jsonc' },
    }
<


==============================================================================
3. Quick start                                 *codesettings.nvim-quick-start*

**Recommended setup:** If you don’t use `before_init` for anything else, you
can use it as a global hook to look for local config files for all LSPs:

>lua
    vim.lsp.config('*', {
      before_init = function(_, config)
        local codesettings = require('codesettings')
        config = codesettings.with_local_settings(config.name, config)
      end,
    })
<

**Alternatively,** you can configure it on a per-server basis.

>lua
    -- you can also still use `before_init` here
    -- if you want codesettings to be `require`d
    -- lazily
    local codesettings = require('codesettings')
    vim.lsp.config(
      'yamlls',
      codesettings.with_local_settings('yamlls', {
        settings = {
          yaml = {
            validate = true,
            schemaStore = { enable = true },
          },
        },
      }, {
        -- you can also pass custom merge opts on a per-server basis
        list_behavior = 'replace',
      })
    )
    
    -- or from a config file under `/lsp/rust-analyzer.lua` in your config directory.
    -- if you use rustaceanvim to configure rust-analyzer, see the `rustaceanvim` section below
    return codesettings.with_local_settings('rust-analyzer', {
      settings = {
        -- ...
      },
    })
<


RUSTACEANVIM                      *codesettings.nvim-quick-start-rustaceanvim*

The `before_init` global hook does not work if you use rustaceanvim
<https://github.com/mrcjkb/rustaceanvim> to configure `rust-analyzer`, however
you can still use `codesettings.nvim` to merge local settings.

`rustaceanvim` loads VS Code settings by default, but your global settings
override the local ones; `codesettings.nvim` does the opposite. Here’s how I
configure `rustaceanvim` in my own setup:

>lua
    return {
      'mrcjkb/rustaceanvim',
      ft = 'rust',
      version = '^6',
      dependencies = { 'mrjones2014/codesettings.nvim' },
      init = function()
        vim.g.rustaceanvim = {
          -- the rest of your settings go here...
    
          -- I want VS Code settings to override my settings,
          -- not the other way around, so use codesettings.nvim
          -- instead of rustaceanvim's built-in vscode settings loader
          load_vscode_settings = false,
          -- the global hook doesn't work when configuring rust-analyzer with rustaceanvim
          settings = function(params, config)
            return params, require('codesettings').with_local_settings('rust-analyzer', config)
          end,
          default_settings = {
            ['rust-analyzer'] = {
              -- your global LSP settings go here
            },
          },
        }
      end,
    }
<


==============================================================================
4. Features                                       *codesettings.nvim-features*

- Minimal API: one function you call per server setup, or with a global hook (see example below)
- `jsonc` filetype for local config files
- `jsonls` integration for schema-based completion of LSP settings in JSON(C) configuration files
- Lua type annotations generated from schemas for autocomplete when writing LSP configs in Lua
- Supports custom config file names/locations
- Supports mixed nested and dotted key paths, for example, this project’s `codesettings.json` looks like:

>jsonc
    {
      "Lua": {
        "runtime.version": "LuaJIT",
        "workspace": {
          "library": ["${3rd}/luassert/library", "${addons}/busted/library"],
          "checkThirdParty": false,
        },
        "diagnostics.globals": ["vim", "setup", "teardown"],
      },
    }
<


==============================================================================
5. Commands                                       *codesettings.nvim-commands*

- `:Codesettings show` - show the resolved LSP config for each active LSP client; note that this only shows _active_ clients
- `:Codesettings local` - show the resolved local config found in local config files in your project
- `:Codesettings files` - show the config files found in your project
- `:Codesettings edit` - edit or create a local config file based on your configured config file paths
- `:Codesettings health` - check plugin health (alias for `:checkhealth codesettings`)


==============================================================================
6. API                                                 *codesettings.nvim-api*

- `require('codesettings').setup(opts?: CodesettingsConfig)`
    - Initialize the plugin. You only need to call this for `jsonls_integration` and `jsonc_filetype` to work, or to customize the local filepaths to look for. It is _not_ required for your local configs to take effect, unless you wish to use non-default plugin configuration.
- `require('codesettings').with_local_settings(lsp_name: string, config: table): table`
    - Loads settings from the configured files, extracts relevant settings for the given LSP based on its schema, and deep-merges into `config.settings`. Returns the merged config.
- `require('codesettings').local_settings(lsp_name: string|nil): Settings`
    - Loads and parses the settings file(s) for the current project. Returns a `Settings` object.
    - If `lsp_name` is specified, filters down to only the relevant properties according to the LSP’s schema.
    - `Settings` object provides some methods like:
        - `Settings:schema(lsp_name)` - Filter the settings down to only the keys that match the relevant schema e.g. `settings:schema('eslint')`
        - `Settings:merge(settings, key, merge_opts)` - merge another `Settings` object into this one, optionally specify a sub-key to merge, and control merge behavior with the 2nd and 3rd parameter, respectively
        - `Settings:get(key)` - returns the value at the specified key; supports dot-separated key paths like `Settings:get('some.sub.property')`
        - `Settings:get_subtable(key)` - like `Settings:get(key)`, but returns a `Settings` object if the path is a table, otherwise an empty `Settings` object
        - `Settings:clear()` - remove all values
        - `Settings:set(key, value)` - supports dot-separated key paths like `some.sub.property`

Example using `local_settings()` directly:

>lua
    local codesettings = require('codesettings')
    local eslint_settings = c.local_settings()
      :schema('eslint')
      :merge({
        eslint = {
          codeAction = {
            disableRuleComment = {
              enable = true,
              location = 'sameLine',
            },
          },
        },
      })
      :get('eslint.codeAction') -- get the codeAction subtable
<


==============================================================================
7. How it finds your settings   *codesettings.nvim-how-it-finds-your-settings*

- Root discovery uses `vim.fs.root` to search upwards with markers based on your configured config file paths, as well as `.git`
- The plugin checks each path in `config_file_paths` under your project root and uses any that exist


==============================================================================
8. How merging works                     *codesettings.nvim-how-merging-works*

Follows the semantics of `vim.tbl_deep_extend('force', your_config,
local_config)`, essentially:

- The plugin deep-merges plain tables (non-list tables)
- List/array values are appended by default; you can change this behavior in configuration or through the API
- Your provided `config` is the base; values from the settings file override or extend it within `config.settings`


==============================================================================
9. Comparison with neoconf.nvim*codesettings.nvim-comparison-with-neoconf.nvim*

  -----------------------------------------------------------------------
                        codesettings.nvim            neoconf.nvim
  --------------------- ---------------------------- --------------------
  Minimum Neovim        Neovim >= 0.11.0             Neovim >= 0.7.2
  version                                            

  Depends on            No (but will still work with Yes
  nvim-lspconfig        it if you choose to use it)  

  Supports mixed nested Yes                          No
  and dotted key paths                               

  Customizable list     Yes                          No
  value merging                                      
  behavior                                           

  jsonls integration    Yes, including mixed nested  Yes
                        and dotted key paths         

  jsonc filetype        Yes                          Yes
  support                                            

  setup() required      Only for some editor         Yes
                        integration features         

  Loading settings      API call                     Automatic through
                                                     nvim-lspconfig hooks
  -----------------------------------------------------------------------
The tl;dr: is if you wish to use `nvim-lspconfig`, then `neoconf.nvim` is more
automatic, but if you want to get rid of `nvim-lspconfig` and just use
`vim.lsp.config()` APIs, then `codesettings.nvim` provides an API to load local
project settings for you.


==============================================================================
10. Acknowledgements                      *codesettings.nvim-acknowledgements*

This project would not exist without the hard work of some other open source
projects!

- Some parts of this plugin are based on folke’s neoconf.nvim plugin <https://github.com/folke/neoconf.nvim>
- This plugin bundles json.lua <https://github.com/actboy168/json.lua>, a pure-Lua JSON library for parsing `jsonc` files


==============================================================================
11. Supported LSP Servers            *codesettings.nvim-supported-lsp-servers*

- als <https://github.com/AdaCore/ada_language_server/tree/master/integration/vscode/ada/package.json>
- astro <https://github.com/withastro/language-tools/tree/main/packages/vscode/package.json>
- awkls <https://github.com/Beaglefoot/awk-language-server/tree/master/client/package.json>
- basedpyright <https://github.com/DetachHead/basedpyright/tree/main/packages/vscode-pyright/package.json>
- bashls <https://github.com/bash-lsp/bash-language-server/tree/master/vscode-client/package.json>
- clangd <https://github.com/clangd/vscode-clangd/tree/master/package.json>
- cssls <https://github.com/microsoft/vscode/tree/main/extensions/css-language-features/package.json>
- dartls <https://github.com/Dart-Code/Dart-Code/tree/master/package.json>
- denols <https://github.com/denoland/vscode_deno/tree/main/package.json>
- elixirls <https://github.com/elixir-lsp/vscode-elixir-ls/tree/master/package.json>
- elmls <https://github.com/elm-tooling/elm-language-client-vscode/tree/master/package.json>
- eslint <https://github.com/microsoft/vscode-eslint/tree/main/package.json>
- flow <https://github.com/flowtype/flow-for-vscode/tree/master/package.json>
- fsautocomplete <https://github.com/ionide/ionide-vscode-fsharp/tree/main/release/package.json>
- grammarly <https://github.com/znck/grammarly/tree/main/extension/package.json>
- haxe_language_server <https://github.com/vshaxe/vshaxe/tree/master/package.json>
- hhvm <https://github.com/slackhq/vscode-hack/tree/master/package.json>
- hie <https://github.com/alanz/vscode-hie-server/tree/master/package.json>
- html <https://github.com/microsoft/vscode/tree/main/extensions/html-language-features/package.json>
- intelephense <https://github.com/bmewburn/vscode-intelephense/tree/master/package.json>
- java_language_server <https://github.com/georgewfraser/java-language-server/tree/master/package.json>
- jdtls <https://github.com/redhat-developer/vscode-java/tree/master/package.json>
- jsonls <https://github.com/microsoft/vscode/tree/master/extensions/json-language-features/package.json>
- julials <https://github.com/julia-vscode/julia-vscode/tree/master/package.json>
- kotlin_language_server <https://github.com/fwcd/vscode-kotlin/tree/master/package.json>
- ltex <https://github.com/valentjn/vscode-ltex/tree/develop/package.json>
- lua_ls <https://github.com/LuaLS/vscode-lua/tree/master/package.json>
- luau_lsp <https://github.com/JohnnyMorganz/luau-lsp/tree/main/editors/code/package.json>
- omnisharp <https://github.com/OmniSharp/omnisharp-vscode/tree/master/package.json>
- perlls <https://github.com/richterger/Perl-LanguageServer/tree/master/clients/vscode/perl/package.json>
- perlnavigator <https://github.com/bscan/PerlNavigator/tree/main/package.json>
- perlpls <https://github.com/FractalBoy/perl-language-server/tree/master/client/package.json>
- powershell_es <https://github.com/PowerShell/vscode-powershell/tree/main/package.json>
- psalm <https://github.com/psalm/psalm-vscode-plugin/tree/master/package.json>
- puppet <https://github.com/puppetlabs/puppet-vscode/tree/main/package.json>
- purescriptls <https://github.com/nwolverson/vscode-ide-purescript/tree/master/package.json>
- pylsp <https://github.com/python-lsp/python-lsp-server/tree/develop/pylsp/config/schema.json>
- pyright <https://github.com/microsoft/pyright/tree/master/packages/vscode-pyright/package.json>
- r_language_server <https://github.com/REditorSupport/vscode-r-lsp/tree/master/package.json>
- rescriptls <https://github.com/rescript-lang/rescript-vscode/tree/master/package.json>
- rls <https://github.com/rust-lang/vscode-rust/tree/master/package.json>
- rome <https://github.com/rome/tools/tree/main/editors/vscode/package.json>
- ruff_lsp <https://github.com/astral-sh/ruff-vscode/tree/main/package.json>
- rust_analyzer <https://github.com/rust-analyzer/rust-analyzer/tree/master/editors/code/package.json>
- solargraph <https://github.com/castwide/vscode-solargraph/tree/master/package.json>
- solidity_ls <https://github.com/juanfranblanco/vscode-solidity/tree/master/package.json>
- sonarlint <https://github.com/SonarSource/sonarlint-vscode/tree/master/package.json>
- sorbet <https://github.com/sorbet/sorbet/tree/master/vscode_extension/package.json>
- sourcekit <https://github.com/swift-server/vscode-swift/tree/main/package.json>
- spectral <https://github.com/stoplightio/vscode-spectral/tree/master/package.json>
- stylelint_lsp <https://github.com/bmatcuk/coc-stylelintplus/tree/master/package.json>
- svelte <https://github.com/sveltejs/language-tools/tree/master/packages/svelte-vscode/package.json>
- svlangserver <https://github.com/eirikpre/VSCode-SystemVerilog/tree/master/package.json>
- tailwindcss <https://github.com/tailwindlabs/tailwindcss-intellisense/tree/master/packages/vscode-tailwindcss/package.json>
- terraformls <https://github.com/hashicorp/vscode-terraform/tree/master/package.json>
- tinymist <https://github.com/Myriad-Dreamin/tinymist/refs/heads/tree/main/editors/vscode/package.json>
- ts_ls <https://github.com/microsoft/vscode/tree/main/extensions/typescript-language-features/package.json>
- typst_lsp <https://github.com/nvarner/typst-lsp/refs/heads/tree/master/editors/vscode/package.json>
- volar <https://github.com/vuejs/language-tools/tree/master/extensions/vscode/package.json>
- vtsls <https://github.com/yioneko/vtsls/tree/main/packages/service/configuration.schema.json>
- vuels <https://github.com/vuejs/vetur/tree/master/package.json>
- wgls_analyzer <https://github.com/wgsl-analyzer/wgsl-analyzer/tree/main/editors/code/package.json>
- yamlls <https://github.com/redhat-developer/vscode-yaml/tree/master/package.json>
- zeta_note <https://github.com/artempyanykh/zeta-note-vscode/tree/main/package.json>
- zls <https://github.com/zigtools/zls-vscode/tree/master/package.json>

==============================================================================
12. Links                                            *codesettings.nvim-links*

1. *jsonls integration*: https://github.com/user-attachments/assets/0f1cd386-d05c-4352-984f-6bac77d4434e
2. *lua type annotations*: https://github.com/user-attachments/assets/647e25cf-9059-433a-bbbf-2069b61df47f

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
